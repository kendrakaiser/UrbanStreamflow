# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")  %>%
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YIELD")
#crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")
View(id_sales)
# query start year
my_year <- "2018"
# state of interest
my_state <- "ID"
###--------------------------------------#
# Download data and turn into dataframe
#####
# final path string
path_id_ops <- paste0("api/api_GET/?key=", nass_key, "&sector_desc=", my_group_desc, "&year=", my_year, "&state_alpha=", my_state)
#unpack JSON object
raw_id_ops <- GET(url = nass_url, path = path_id_ops)
char_raw_id_ops<- rawToChar(raw_id_ops$content)
# check size of object
nchar(char_raw_id_ops)
#turn into list
list_raw_id_ops<- fromJSON(char_raw_id_ops)
# apply rbind to each row of the list and convert to a data frame
id_ops_raw_data <- pmap_dfr(list_raw_id_ops, rbind)
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YIELD")
#crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")  %>%
#filter(crop %in% crops)
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YIELD")
#crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")
View(id_sales)
View(id_ops_raw_data)
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc, commodity_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")
View(id_sales)
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE")
View(id_sales)
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
filter(reference_period_desc == 'YEAR')
my_year <- "2010"
# state of interest
my_state <- "ID"
###--------------------------------------#
# Download data and turn into dataframe
#####
# final path string
path_id_ops <- paste0("api/api_GET/?key=", nass_key, "&sector_desc=", my_group_desc, "&year=", my_year, "&state_alpha=", my_state)
#unpack JSON object
raw_id_ops <- GET(url = nass_url, path = path_id_ops)
char_raw_id_ops<- rawToChar(raw_id_ops$content)
# check size of object
nchar(char_raw_id_ops)
#turn into list
list_raw_id_ops<- fromJSON(char_raw_id_ops)
# apply rbind to each row of the list and convert to a data frame
id_ops_raw_data <- pmap_dfr(list_raw_id_ops, rbind)
###--------------------------------------#
# Subset Data based on highest value crops
#####
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YIELD")
#crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
filter(reference_period_desc == 'YEAR')
View(id_sales)
unique(id_sales$commodity_desc)
unique(id_ops_raw_data$commodity_desc)
tst<-unique(id_ops_raw_data$commodity_desc)
tst2<-unique(id_sales$commodity_desc)
setwd("~/Documents/GitRepos/UrbanStreamflow")
library(tidyverse)
library(WaveletComp)
Q=read.csv("BRB_Q_subset.csv")
TwnSprings<-Q[ Q$site_no ==  "13185000",]
Glenwood<-Q[Q$site_no ==  "13206000",]
Caldwell<-Q[Q$site_no ==  "13211205",]
Parma<-Q[Q$site_no ==  "13213000",]
library(dtw)
#TwnSprings - Glenwood
par(mfrow=c(3,1))
plot(
dtw(TwnSprings$Flow_Inst,Parma$Flow_Inst,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2)
plot(
dtw(TwnSprings$Flow_Inst,Parma$Flow_Inst,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2)
plot(
dtw(Glenwood$Flow_Inst,Caldwell$Flow_Inst,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2)
View(Glenwood)
View(Caldwell)
plot(
dtw(Glenwood$Flow_Inst[100:4676,],Caldwell$Flow_Inst[100:4676,],keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2)
plot(
dtw(Glenwood$Flow_Inst[100:4676],Caldwell$Flow_Inst[100:4676],keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2)
plot(
dtw(Glenwood$Flow_Inst[100:4656],Caldwell$Flow_Inst[100:4656],keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2)
plot(
dtw(Glenwood$Flow_Inst[200:4656],Caldwell$Flow_Inst[200:4656],keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2)
plot(
dtw(Glenwood$Flow_Inst[1200:4656],Caldwell$Flow_Inst[1200:4656],keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2)
plot(
dtw(Glenwood$Flow_Inst[1700:4656],Caldwell$Flow_Inst[1700:4656],keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway")
plot(
dtw(Glenwood$Flow_Inst[1700:4656],Caldwell$Flow_Inst[1700:4656],keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway", offset =2)
plot(
dtw(Caldwell$Flow_Inst[1700:4656], Glenwood$Flow_Inst[1700:4656], keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway")
plot(
dtw(Glenwood$Flow_Inst[1700:4656],Caldwell$Flow_Inst[1700:4656], keep=TRUE,
step=rabinerJuangStepPattern(4,"c")),
type="twoway")
plot(
dtw(Glenwood$Flow_Inst[1700:4656],Caldwell$Flow_Inst[1700:4656], keep=TRUE,
step=rabinerJuangStepPattern(1,"c")),
type="twoway")
plot(
dtw(Glenwood$Flow_Inst[1700:4656],Caldwell$Flow_Inst[1700:4656], keep=TRUE,
step=rabinerJuangStepPattern(2,"c")),
type="twoway")
plot(
dtw(Glenwood$Flow_Inst[1700:4656],Caldwell$Flow_Inst[1700:4656], keep=TRUE,
step=rabinerJuangStepPattern(3,"c")),
type="twoway")
plot(
dtw(Glenwood$Flow_Inst[1700:4656],Caldwell$Flow_Inst[1700:4656], keep=TRUE,
step=rabinerJuangStepPattern(5,"c")),
type="twoway")
plot(
dtw(Glenwood$Flow_Inst[1700:4656],Caldwell$Flow_Inst[1700:4656], keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway")
Featherville<-Q[Q$site_no ==  "13186000",]
plot(
dtw(Featherville$Flow_Inst,TwnSprings$Flow_Inst,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2)
View(TwnSprings)
library(dataRetrieval)
library(tidyverse)
setwd("~/Documents/GitRepos/UrbanStreamflow")
USGS_sites<- read_csv('USGSGages.csv')
siteInfo<-readNWISdata(sites= USGS_sites$Code, service="site")
write_csv(siteInfo, "siteInfo.csv")
start=as.Date("2019-01-16")
end= as.Date("2019-03-16")
pCode <- "00060"
flowdata <- readNWISuv(siteNumbers = siteInfo$site_no, parameterCd = pCode, startDate = start, endDate = end) %>% renameNWISColumns() %>% data.frame
flow<-merge(flowdata, USGS_sites, by.x="site_no", by.y="Code", all=TRUE)
Featherville<-flow[flow$site_no == "13186000"]
Featherville<-flow[flow$site_no == "13186000",]
TwnSprings<-flow[flow$site_no == "13185000",]
start=as.Date("2019-01-16")
end= as.Date("2019-03-06")
pCode <- "00060"
flowdata <- readNWISuv(siteNumbers = siteInfo$site_no, parameterCd = pCode, startDate = start, endDate = end) %>% renameNWISColumns() %>% data.frame
flow<-merge(flowdata, USGS_sites, by.x="site_no", by.y="Code", all=TRUE)
Featherville<-flow[flow$site_no == "13186000",]
TwnSprings<-flow[flow$site_no == "13185000",]
plot(
dtw(Featherville$Flow_Inst,TwnSprings$Flow_Inst, keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2)
plot(TwnSprings$Flow_Inst, type = 'l')
plot(Featherville$Flow_Inst, type = 'l')
Featherville<-flow[flow$site_no == "13186000",]
TwnSprings<-flow[flow$site_no == "13185000",]
Glenwood<-flow[flow$site_no ==  "13206000",]
Caldwell<-flow[flow$site_no ==  "13211205",]
Parma<-flow[flow$site_no ==  "13213000",]
flows<- c(Featherville$Flow_Inst, TwnSprings$Flow_Inst, Glenwood$Flow_Inst, Caldwell$Flow_Inst, Parma$Flow_Inst)
View(flow)
flows<- rbind.data.frame(Featherville$Flow_Inst, TwnSprings$Flow_Inst, Glenwood$Flow_Inst, Caldwell$Flow_Inst, Parma$Flow_Inst)
View(flows)
View(Parma)
colnames(flows, do.NULL = TRUE)
View(flow)
View(flows)
flows<- cbind.data.frame(Featherville$Flow_Inst, TwnSprings$Flow_Inst, Glenwood$Flow_Inst, Caldwell$Flow_Inst, Parma$Flow_Inst)
flow<-merge(flowdata, USGS_sites, by.x="site_no", by.y="Code", all=TRUE)
Q<-flow[flow$site_no == "13185000" | flow$site_no == "13206000" | flow$site_no ==  "13211205" | flow$site_no == "13213000",]
Q<-Q[,-6]
write.csv(Q, file="BRB_Q_subset.csv")
Drains<-flow[flow$Cat == 'Drain',]
drainID<-unique(Drains$site_no)
plot(Drains$dateTime[Drains$site_no == drainID[1]], Drains$Flow_Inst[Drains$site_no == drainID[1]], type="l", col="blue", ylim=c(0, 80)) #eagle
lines(Drains$dateTime[Drains$site_no == drainID[2]], Drains$Flow_Inst[Drains$site_no == drainID[2]], col= 'red') #middleton slough
lines(Drains$dateTime[Drains$site_no == drainID[3]], Drains$Flow_Inst[Drains$site_no == drainID[3]], col='green') #S middleton drain
plot(Drains$dateTime[Drains$site_no == drainID[4]], Drains$Flow_Inst[Drains$site_no == drainID[4]], type="l", col="blue") #Dixie Drain
Nat<-flow[flow$Cat == 'Natural',]
natID<-unique(Nat$site_no)
plot(Nat$dateTime[Nat$site_no == natID[1]], Nat$Flow_Inst[Nat$site_no == natID[1]], type="l", col="blue", ylim=c(0, 950))
lines(Nat$dateTime[Nat$site_no ==natID[2]], Nat$Flow_Inst[Nat$site_no == natID[2]], col = 'green')
lines(Nat$dateTime[Nat$site_no ==natID[3]], Nat$Flow_Inst[Nat$site_no == natID[3]], col = 'black')
legend("topleft", legend=c("Boise Twin Springs", "SF Boise Featherville", "Mores Creek"), col=c("blue", "green", 'black'), lty=1:2, cex=0.8)
plot(Nat$dateTime[Nat$site_no == natID[4]], Nat$Flow_Inst[Nat$site_no == natID[4]], type="l", col="blue")
legend("topleft", legend=c("Eagle", "Middleton Slough", "S Middleton"), col=c("blue", "red", "green"), lty=1:2, cex=0.8)
plot(Nat$dateTime[Nat$site_no == natID[1]], Nat$Flow_Inst[Nat$site_no == natID[1]], type="l", col="blue", ylim=c(0, 950))
lines(Nat$dateTime[Nat$site_no ==natID[2]], Nat$Flow_Inst[Nat$site_no == natID[2]], col = 'green')
lines(Nat$dateTime[Nat$site_no ==natID[3]], Nat$Flow_Inst[Nat$site_no == natID[3]], col = 'black')
lines(Nat$dateTime[Nat$site_no == natID[4]], Nat$Flow_Inst[Nat$site_no == natID[4]], type="l", col="red")
legend("topleft", legend=c("Boise Twin Springs", "SF Boise Featherville", "Mores Creek"), col=c("blue", "green", 'black'), lty=1:2, cex=0.8)
plot(Nat$dateTime[Nat$site_no == natID[1]], Nat$Flow_Inst[Nat$site_no == natID[1]], type="l", col="blue", ylim=c(0, 950), log="y")
lines(Nat$dateTime[Nat$site_no ==natID[2]], Nat$Flow_Inst[Nat$site_no == natID[2]], col = 'green')
lines(Nat$dateTime[Nat$site_no ==natID[3]], Nat$Flow_Inst[Nat$site_no == natID[3]], col = 'black')
lines(Nat$dateTime[Nat$site_no == natID[4]], Nat$Flow_Inst[Nat$site_no == natID[4]], type="l", col="red")
legend("topleft", legend=c("Boise Twin Springs", "SF Boise Featherville", "Mores Creek"), col=c("blue", "green", 'black'), lty=1:2, cex=0.8)
plot(Nat$dateTime[Nat$site_no == natID[4]], Nat$Flow_Inst[Nat$site_no == natID[4]], type="l", col="red")
plot(Nat$dateTime[Nat$site_no == natID[4]], Nat$Flow_Inst[Nat$site_no == natID[4]], type="l", col="red", log='y')
plot(Nat$dateTime[Nat$site_no == natID[1]], Nat$Flow_Inst[Nat$site_no == natID[1]], type="l", col="blue", log="y")
lines(Nat$dateTime[Nat$site_no ==natID[2]], Nat$Flow_Inst[Nat$site_no == natID[2]], col = 'green')
lines(Nat$dateTime[Nat$site_no ==natID[3]], Nat$Flow_Inst[Nat$site_no == natID[3]], col = 'black')
plot(Nat$dateTime[Nat$site_no == natID[1]], Nat$Flow_Inst[Nat$site_no == natID[1]], type="l", col="blue", log="y")
lines(Nat$dateTime[Nat$site_no ==natID[2]], Nat$Flow_Inst[Nat$site_no == natID[2]], col = 'green')
lines(Nat$dateTime[Nat$site_no ==natID[3]], Nat$Flow_Inst[Nat$site_no == natID[3]], col = 'black')
lines(Nat$dateTime[Nat$site_no == natID[4]], Nat$Flow_Inst[Nat$site_no == natID[4]], type="l", col="red")
plot(Nat$dateTime[Nat$site_no == natID[1]], Nat$Flow_Inst[Nat$site_no == natID[1]], type="l", col="blue", ylim=c(0, 950))
lines(Nat$dateTime[Nat$site_no ==natID[2]], Nat$Flow_Inst[Nat$site_no == natID[2]], col = 'green')
lines(Nat$dateTime[Nat$site_no ==natID[3]], Nat$Flow_Inst[Nat$site_no == natID[3]], col = 'black')
legend("topleft", legend=c("Boise Twin Springs", "SF Boise Featherville", "Mores Creek"), col=c("blue", "green", 'black'), lty=1:2, cex=0.8)
plot(Nat$dateTime[Nat$site_no == natID[4]], Nat$Flow_Inst[Nat$site_no == natID[4]], type="l", col="red")
plot(Drains$dateTime[Drains$site_no == drainID[1]], Drains$Flow_Inst[Drains$site_no == drainID[1]], type="l", col="black", ylim=c(0, 80)) #eagle
lines(Drains$dateTime[Drains$site_no == drainID[2]], Drains$Flow_Inst[Drains$site_no == drainID[2]], col= 'red') #middleton slough
lines(Drains$dateTime[Drains$site_no == drainID[3]], Drains$Flow_Inst[Drains$site_no == drainID[3]], col='green') #S middleton drain
legend("topleft", legend=c("Eagle", "Middleton Slough", "S Middleton"), col=c("blue", "red", "green"), lty=1:2, cex=0.8)
plot(Drains$dateTime[Drains$site_no == drainID[1]], Drains$Flow_Inst[Drains$site_no == drainID[1]], type="l", col="black", ylim=c(0, 80)) #eagle
lines(Drains$dateTime[Drains$site_no == drainID[2]], Drains$Flow_Inst[Drains$site_no == drainID[2]], col= 'blue') #middleton slough
lines(Drains$dateTime[Drains$site_no == drainID[3]], Drains$Flow_Inst[Drains$site_no == drainID[3]], col='green') #S middleton drain
legend("topleft", legend=c("Eagle", "Middleton Slough", "S Middleton"), col=c("blue", "red", "green"), lty=1:2, cex=0.8)
plot(Drains$dateTime[Drains$site_no == drainID[1]], Drains$Flow_Inst[Drains$site_no == drainID[1]], type="l", col="black", ylim=c(0, 80)) #eagle
lines(Drains$dateTime[Drains$site_no == drainID[2]], Drains$Flow_Inst[Drains$site_no == drainID[2]], col= 'blue') #middleton slough
lines(Drains$dateTime[Drains$site_no == drainID[3]], Drains$Flow_Inst[Drains$site_no == drainID[3]], col='green') #S middleton drain
legend("topleft", legend=c("Eagle", "Middleton Slough", "S Middleton"), col=c("black", "blue", "green"), lty=1:2, cex=0.8)
Managed<-flow[flow$Cat == 'Managed',]
manID<-unique(Managed$site_no)
plot(res$Date, res$lucQ, col='black', type='l')
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 3000))
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
library(XML)
# pu: cumulative water year precip; px: observed daily totatl precip; ID: computed reservoir inflow
url_ark <- "daily_precip_ark.htm" #arrowrock
data_ark <- readHTMLTable(url_ark, header=TRUE, as.data.frame = TRUE, stringsAsFactors=FALSE)# Read the HTML table
ark=data_ark[[1]] #convert to data frame
url_and <- "daily_precip_and.htm"# Assign URL - Anderson Ranch
data_and <- readHTMLTable(url_and, header=TRUE, as.data.frame = TRUE, stringsAsFactors=FALSE)
and=data_and[[1]]
url_luc <- "daily_luc_spring.htm"#Lucky Peak "luc_daily.htm"
data_luc <- readHTMLTable(url_luc, header=TRUE, as.data.frame = TRUE, stringsAsFactors=FALSE)
luc=data_luc[[1]]
url_nyc<- "nyc_daily.htm"#new york canal
data_nyc<- readHTMLTable(url_nyc, header=TRUE, as.data.frame = TRUE, stringsAsFactors=FALSE)
nyc=data_nyc[[1]]
luc_spring<-data.frame("Date"= as.Date(luc[,1]), "lucQ"=as.numeric(luc$luc_qd), "lucI"=as.numeric(luc$luc_id))
plot(luc_spring$Date, luc_spring$lucQ, type='l')
nyc_spring<-data.frame("Date"= as.Date(nyc[,1]),"nycQ"=as.numeric(nyc$bsei_qj))
plot(nyc_spring$Date, nyc_spring$nycQ, type='l')
res<-data.frame("Date"= as.Date(and[,1]), "andP"=as.numeric(and$and_pp), "arkP" = as.numeric(ark$ark_pp), "in_computed_ark"=as.numeric(ark$ark_id), "lucQ" = as.numeric(luc$luc_qd), "in_computed_LUC"=as.numeric(luc$luc_id), "in_unreg_LUC"= as.numeric(luc$luc_qu))
View(luc_spring)
abline(h=252)
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 3000))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 2000))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 2000))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
axis(1, Managed$dateTime, format(Managed$dateTime, "%d %d"), cex.axis = .7)
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1800))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
axis.Date(1, Managed$dateTime, format("%d %m"), labels = TRUE)
axis.Date(1, Managed$dateTime, format="%d %m", labels = TRUE)
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1800))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
axis.Date(1, at=seq(min(Managed$dateTime), max(Managed$dateTime), by="1 week"), format="%d%m")
seq(min(Managed$dateTime))
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1800))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
axis.Date(1, at=seq(start, end, by="1 week"), format="%d%m")
axis.Date(1, at=seq(start, end, by="weeks"), format="%d%m")
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1800))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
axis.Date(1, at=seq(start, end, by="weeks"), format="%d%m")
print(start)
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1800))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
axis.Date(1, at=seq(start, end, by="weeks"))
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1800))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%d%m")
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1800))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%d")
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1800))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%d %m")
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1600))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)+
labs(x = NULL, y = NULL)
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%m-%d")+
ylab-"Sreamflow (CFS)"
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1600))
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)+
labs(x = NULL, y = NULL)+
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%m-%d")+
ylab-"Sreamflow (CFS)"
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1600), xlab="Date", ylab="Discharge (cfs)")
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)+
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%m-%d")
plot(Managed$dateTime[Managed$site_no == manID[2]], Managed$Flow_Inst[Managed$site_no == manID[2]], type="l", col="blue", ylim=c(200, 1600), xlab="Date", ylab="Discharge (cfs)", xlab=NULL)
abline(h=252)
lines(Managed$dateTime[Managed$site_no == manID[3]], Managed$Flow_Inst[Managed$site_no == manID[3]], col='green')
lines(Managed$dateTime[Managed$site_no == manID[6]], Managed$Flow_Inst[Managed$site_no == manID[6]], col='orange')
lines(Managed$dateTime[Managed$site_no == manID[7]], Managed$Flow_Inst[Managed$site_no == manID[7]], col= 'red')
legend("topleft", legend=c("Below Arrowrock", "Glenwood", "Caldwell", "Parma"), col=c("blue", "green", 'orange', 'red'), lty=1:2, cex=0.8)+
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%m-%d")
plot(Nat$dateTime[Nat$site_no == natID[1]], Nat$Flow_Inst[Nat$site_no == natID[1]], type="l", col="blue", ylim=c(0, 950), xlab="Date", ylab="Discharge (cfs)")
lines(Nat$dateTime[Nat$site_no ==natID[2]], Nat$Flow_Inst[Nat$site_no == natID[2]], col = 'green')
lines(Nat$dateTime[Nat$site_no ==natID[3]], Nat$Flow_Inst[Nat$site_no == natID[3]], col = 'black')
legend("topleft", legend=c("Boise Twin Springs", "SF Boise Featherville", "Mores Creek"), col=c("blue", "green", 'black'), lty=1:2, cex=0.8)
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%m-%d")
plot(Nat$dateTime[Nat$site_no == natID[4]], Nat$Flow_Inst[Nat$site_no == natID[4]], type="l", col="red", xlab="Date", ylab="Discharge (cfs)")
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%m-%d")
plot(Drains$dateTime[Drains$site_no == drainID[1]], Drains$Flow_Inst[Drains$site_no == drainID[1]], type="l", col="black", ylim=c(0, 80), xlab="Date", ylab="Discharge (cfs)", xlab="Date", ylab="Discharge (cfs)") #eagle
lines(Drains$dateTime[Drains$site_no == drainID[2]], Drains$Flow_Inst[Drains$site_no == drainID[2]], col= 'blue') #middleton slough
lines(Drains$dateTime[Drains$site_no == drainID[3]], Drains$Flow_Inst[Drains$site_no == drainID[3]], col='green') #S middleton drain
legend("topleft", legend=c("Eagle", "Middleton Slough", "S Middleton"), col=c("black", "blue", "green"), lty=1:2, cex=0.8)
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%m-%d")
plot(Drains$dateTime[Drains$site_no == drainID[1]], Drains$Flow_Inst[Drains$site_no == drainID[1]], type="l", col="black", ylim=c(0, 80), xlab="Date", ylab="Discharge (cfs)", xlab="Date", ylab="Discharge (cfs)") #eagle
lines(Drains$dateTime[Drains$site_no == drainID[2]], Drains$Flow_Inst[Drains$site_no == drainID[2]], col= 'blue') #middleton slough
lines(Drains$dateTime[Drains$site_no == drainID[3]], Drains$Flow_Inst[Drains$site_no == drainID[3]], col='green') #S middleton drain
legend("topleft", legend=c("Eagle", "Middleton Slough", "S Middleton"), col=c("black", "blue", "green"), lty=1:2, cex=0.8)
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%m-%d")
plot(Drains$dateTime[Drains$site_no == drainID[1]], Drains$Flow_Inst[Drains$site_no == drainID[1]], type="l", col="black", ylim=c(0, 80), xlab="Date", ylab="Discharge (cfs)") #eagle
lines(Drains$dateTime[Drains$site_no == drainID[2]], Drains$Flow_Inst[Drains$site_no == drainID[2]], col= 'blue') #middleton slough
lines(Drains$dateTime[Drains$site_no == drainID[3]], Drains$Flow_Inst[Drains$site_no == drainID[3]], col='green') #S middleton drain
legend("topleft", legend=c("Eagle", "Middleton Slough", "S Middleton"), col=c("black", "blue", "green"), lty=1:2, cex=0.8)
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%m-%d")
plot(Drains$dateTime[Drains$site_no == drainID[1]], Drains$Flow_Inst[Drains$site_no == drainID[1]], type="l", col="black", ylim=c(0, 60), xlab="Date", ylab="Discharge (cfs)") #eagle
lines(Drains$dateTime[Drains$site_no == drainID[2]], Drains$Flow_Inst[Drains$site_no == drainID[2]], col= 'blue') #middleton slough
lines(Drains$dateTime[Drains$site_no == drainID[3]], Drains$Flow_Inst[Drains$site_no == drainID[3]], col='green') #S middleton drain
legend("topleft", legend=c("Eagle", "Middleton Slough", "S Middleton"), col=c("black", "blue", "green"), lty=1:2, cex=0.8)
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%m-%d")
plot(Drains$dateTime[Drains$site_no == drainID[4]], Drains$Flow_Inst[Drains$site_no == drainID[4]], type="l", col="blue", xlab="Date", ylab="Discharge (cfs)") #Dixie Drain
axis.POSIXct(1, at = seq(start, end, by="weeks"), format = "%m-%d")
